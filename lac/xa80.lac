//======================================================================
//
//  XA80.LAC - Duncan's Cross Assembler for x80 processors
//  Includes: Z80, Z180
//
//  Grammer to deal with a single line from an assembly file
//
//  Duncan Munro
//  30/06/2022
//
//  Last updated 30/06/2022
//
//======================================================================

%title		= "Duncan's XA80 Cross Assembler Grammar";
%version	= "0.1";
%author		= "Duncan Munro";  
%start		= <assembler_line>;
             
    
//
// Initial Character set definitions
//

{Backslash}     = [\x5c];
{Digit} 		= [0-9];
{DigitBin}		= [01];
{DigitNonZero}	= [1-9];
{DigitOct}		= [0-7];
{DigitZero}		= [0];
{DQuote}		= [\x22];
{Escaped}       = [\x5c\x22\x27tnr];
{Letter}		= [A-Za-z];
{Printable}		= [\x20-\x7e];
{Space}			= [\x20];
{SQuote}		= [\x27];


// Composite sets

{DigitHex}		= {Digit} + [ABCDEFabcdef];
{CommentChar}	= {Printable} ;
{NonCurlyChar}	= {Printable} - [}];
{StringCharDQ}	= {Printable} - {DQuote} - {Backslash};
{StringCharSQ}	= {Printable} - {SQuote} - {Backslash};
{Whitespace} 	= {Space} ;  // Tab has already been dealt with by pre-parser

{SymbolStart}	= {Letter} + [_?];
{SymbolMid}		= {SymbolStart} + [.] + {Digit};                                    


//
// Terminal Definitions
//

// Operands

T_OPERAND_IX	= MIXED("IX")   keyword;
T_OPERAND_IY	= MIXED("IY")   keyword;

T_OPERAND_SIMPLE	= MIXED("A")
					| MIXED("AF") 	
					| MIXED("AF'") 	
					| MIXED("B")	
					| MIXED("BC")	
					| MIXED("[BC]") 
					| MIXED("C")
					| MIXED("[C]")
					| MIXED("D")	
					| MIXED("DE")	
					| MIXED("[DE]") 
					| MIXED("E")	
					| MIXED("F")	
					| MIXED("H")	
					| MIXED("HL")	
					| MIXED("[HL]") 
					| MIXED("I")	
					| MIXED("L")
					| MIXED("M")
					| MIXED("NC")	
					| MIXED("NZ")	
					| MIXED("P")	
					| MIXED("PE")	
					| MIXED("PO")
					| MIXED("PSW")
					| MIXED("R")	
					| MIXED("SP")
					| MIXED("[SP]") 
					| MIXED("Z") keyword;
  
// Unary and Binary operators

T_BINAND           = "&" 	symbol ;
T_BINNOT           = "~" 	symbol ;                 
T_BINOR            = "|"	symbol ;
T_BINXOR           = "^"    symbol ;                                  
T_LEFTSHIFT        = "<<"   symbol ;
T_MODULO           = "%" | MIXED("MOD")  	symbol ;
T_RIGHTSHIFT       = ">>" 	symbol ;
                                                   
// Comparison operators

T_EQUAL            = "=="	 symbol ;
T_GREATERTHAN      = ">" 	 symbol ;
T_GREATEREQUAL     = ">="	 symbol ;
T_LESSEQUAL        = "<=" 	 symbol ;                                 
T_LESSTHAN         = "<"     symbol ;                                  
T_LOGICALAND       = "&&"    symbol ;                 
T_LOGICALNOT       = "!"     symbol ;                 
T_LOGICALOR        = "||"    symbol ;                 
T_NOTEQUAL         = "!="    symbol ; 

// Other operators

T_ASSIGN		   = "="	 symbol ;

// Literals

T_BINLITERAL       = "0" MIXED("B") {DigitBin}+ | "%"{DigitBin}+ | {DigitBin}+MIXED("B");
T_DECLITERAL       = {DigitZero} | {DigitNonZero}{Digit}* | {DigitNonZero}{Digit}*d | {DigitNonZero}{Digit}*D | {Digit}+;
T_HEXLITERAL       = ( "0" MIXED("X") {DigitHex}+ | "$"{DigitHex}+ | "#"{DigitHex}+ | {Digit}{DigitHex}*MIXED("H") )  ;
T_OCTLITERAL       = {DigitOct}+(MIXED("O")|MIXED("Q"));

// Functions

F_HIGH				= MIXED("HIGH(")		keyword;
F_IIF				= MIXED("IIF(")			keyword;
F_LOW				= MIXED("LOW(")			keyword;
F_ORG				= MIXED("ORG(")			keyword;

// Keywords 

K_DB        = MIXED("DB") | MIXED("DEFB")	keyword;
K_DC		= MIXED("DC") | MIXED("DEFC")	keyword;
K_DEFMACRO 	= MIXED("DEFMACRO")  			keyword;
K_DEFINE	= MIXED("DEFINE")	 			keyword;
K_DS 		= MIXED("DS") | MIXED("DEFS")	keyword;
K_DW 		= MIXED("DW") | MIXED("DEFW")	keyword;
K_ELSE 		= MIXED("ELSE") 	 			keyword;
K_END 		= MIXED("END") 		 			keyword;
K_ENDIF 	= MIXED("ENDIF") 	 			keyword;
K_ENDM 		= MIXED("ENDM") 	 			keyword;
K_EQU 		= MIXED("EQU") 		 			keyword;
K_ERROR 	= MIXED("ASMERROR")  			keyword;
K_IF 		= MIXED("IF") 		 			keyword;
K_IFDEF 	= MIXED("IFDEF") 	 			keyword;
K_IFNDEF 	= MIXED("IFNDEF")  	 			keyword;
K_INCLUDE   = MIXED("INCLUDE") 	 			keyword;
K_INCLUDEFL = MIXED("INCLUDEFL") 			keyword;
// K_LIST 		= MIXED("LIST") 	 			keyword;
K_MACRO 	= MIXED("MACRO") 	 			keyword;
K_MESSAGE 	= MIXED("MESSAGE") 	 			keyword;
// K_NOLIST 	= MIXED("NOLIST") 	 			keyword;
K_ORG 		= MIXED("ORG") 		 			keyword;
K_UNDEFINE  = MIXED("UNDEFINE")  			keyword;
K_WARNING 	= MIXED("ASMWARNING")  			keyword;

// Opcodes for Z80 and Z180

T_OPCODE 	= MIXED("ACI")
			| MIXED("ADC")
			| MIXED("ADD")
			| MIXED("ADI")
			| MIXED("ANA")
			| MIXED("AND")
			| MIXED("ANI")
			| MIXED("BIT")
			| MIXED("CALL")
			| MIXED("CC")
			| MIXED("CCF")
			| MIXED("CM")
			| MIXED("CMA")
			| MIXED("CMC")
			| MIXED("CMP")
			| MIXED("CNC")
			| MIXED("CNZ")
			| MIXED("CP")
			| MIXED("CPD")
			| MIXED("CPDR")
			| MIXED("CPE")
			| MIXED("CPI")
			| MIXED("CPIR")
			| MIXED("CPL")
			| MIXED("CPO")
			| MIXED("CZ")
			| MIXED("DAA")
			| MIXED("DAD")
			| MIXED("DCR")
			| MIXED("DCX")
			| MIXED("DEC")
			| MIXED("DI")
			| MIXED("DJNZ")
			| MIXED("EI")
			| MIXED("EX")
			| MIXED("EXX")
			| MIXED("HALT")
			| MIXED("HLT")
			| MIXED("IM")
			| MIXED("IN")
			| MIXED("IN0")
			| MIXED("INC")
			| MIXED("IND")
			| MIXED("INDR")
			| MIXED("INI")
			| MIXED("INIR")
			| MIXED("INR")
			| MIXED("INX")
			| MIXED("JC")
			| MIXED("JM")
			| MIXED("JMP")
			| MIXED("JNC")
			| MIXED("JNZ")
			| MIXED("JP")
			| MIXED("JPE")
			| MIXED("JPO")
			| MIXED("JR")
			| MIXED("JZ")
			| MIXED("LD")
			| MIXED("LDA")
			| MIXED("LDAX")
			| MIXED("LDD")
			| MIXED("LDDR")
			| MIXED("LDI")
			| MIXED("LDIR")
			| MIXED("LHLD")
			| MIXED("LXI")
			| MIXED("MOV")
			| MIXED("MULT")
			| MIXED("MVI")
			| MIXED("NEG")
			| MIXED("NOP")
			| MIXED("OR")
			| MIXED("ORA")
			| MIXED("ORI")
			| MIXED("OTD")
			| MIXED("OTDM")
			| MIXED("OTDMR")
			| MIXED("OTDR")
			| MIXED("OTI")
			| MIXED("OTIM")
			| MIXED("OTIMR")
			| MIXED("OTIR")
			| MIXED("OUT")
			| MIXED("OUT0")
			| MIXED("OUTD")
			| MIXED("OUTI")
			| MIXED("PCHL")
			| MIXED("POP")
			| MIXED("PUSH")
			| MIXED("RAL")
			| MIXED("RAR")
			| MIXED("RC")
			| MIXED("RES")
			| MIXED("RET")
			| MIXED("RETI")
			| MIXED("RETN")
			| MIXED("RIM")
			| MIXED("RL")
			| MIXED("RLA")
			| MIXED("RLC")
			| MIXED("RLCA")
			| MIXED("RLD")
			| MIXED("RM")
			| MIXED("RNC")
			| MIXED("RNZ")
			| MIXED("RP")
			| MIXED("RPE")
			| MIXED("RPO")
			| MIXED("RR")
			| MIXED("RRA")
			| MIXED("RRC")
			| MIXED("RRCA")
			| MIXED("RRD")
			| MIXED("RST")
			| MIXED("RZ")
			| MIXED("SBB")
			| MIXED("SBC")
			| MIXED("SBI")
			| MIXED("SCF")
			| MIXED("SET")
			| MIXED("SHLD")
			| MIXED("SIM")
			| MIXED("SLA")
			| MIXED("SLP")
			| MIXED("SPHL")
			| MIXED("SRA")
			| MIXED("SRL")
			| MIXED("STA")
			| MIXED("STAX")
			| MIXED("STC")
			| MIXED("SUB")
			| MIXED("SUI")
			| MIXED("TST")
			| MIXED("XCHG")
			| MIXED("XOR")
			| MIXED("XRA")
			| MIXED("XRI")
			| MIXED("XTHL")
			keyword;

// Labels etc.

T_STRINGCONSTANT	= {DQuote} ({StringCharDQ} | {Backslash} {Escaped})* {DQuote}
					| {SQuote} ({StringCharSQ} | {Backslash} {Escaped})* {SQuote} ;
					
T_SYMBOLDEF 		= {SymbolStart} {SymbolMid}* ;					
T_SYMBOLDEFC 		= {SymbolStart} {SymbolMid}* ":" |
                      "." {SymbolMid}* ;
T_WHITESPACE		= {Whitespace}+ ignore;

//
// Lexical groups
//

LineComment1		= ";" {CommentChar}* ignore;           
LineComment2		= "//" {CommentChar}* ignore; 
InternalComment1	= "{" {NonCurlyChar}* "}" ignore;


//==============================================================================
//
//  PRODUCTIONS
//
//==============================================================================

<assembler_line>	: T_SYMBOLDEFC <optinstruction>						# ActSymbolDef
					| <optinstruction>									# ActIgnore
					| T_SYMBOLDEF K_EQU <expression>					# ActDirDefineExpr
					| T_SYMBOLDEFC K_EQU <expression>					# ActDirDefineExprC
					| T_SYMBOLDEF T_ASSIGN <expression>					# ActDirSetExpr
					;

<optinstruction>	: T_OPCODE <operand> "," <operand>				    # ActOpcode2
					| T_OPCODE <operand>							    # ActOpcode1
					| T_OPCODE 										    # ActOpcode0
					| K_DB        <expression_list>						# ActDirDB
					| K_DC		  <expression_list>						# ActDirDC
					| K_DEFINE	  T_SYMBOLDEF							# ActDirDefine
					| K_DEFMACRO  T_SYMBOLDEF							# ActDirDefMacro
					| K_DS        <expression>							# ActDirDS
					| K_DS        <expression> "," <expression>		 	# ActDirDS2
					| K_DW        <expression_list>						# ActDirDW
					| K_ELSE											# ActDirElse
					| K_END												# ActDirEnd
					| K_END		  T_SYMBOLDEF							# ActDirEnd
					| K_ENDIF											# ActDirEndif
					| K_ENDM											# ActDirEndm
					| K_ERROR     T_STRINGCONSTANT						# ActDirError
					| K_IF		  <expression>							# ActDirIf
					| K_IFDEF     T_SYMBOLDEF							# ActDirIfdef
					| K_IFNDEF    T_SYMBOLDEF							# ActDirIfndef
					| K_INCLUDE   T_STRINGCONSTANT						# ActDirInclude
					| K_INCLUDEFL T_STRINGCONSTANT						# ActDirIncludeList
//					| K_LIST											# ActDirList
					| K_MACRO T_SYMBOLDEF <param_list>					# ActDirMacro
					| K_MACRO T_SYMBOLDEF 								# ActDirMacroNoexpr
					| K_MESSAGE   T_STRINGCONSTANT						# ActDirMessage
//					| K_NOLIST 											# ActDirNolist
					| K_ORG       <expression>							# ActDirOrg
					| K_UNDEFINE  T_SYMBOLDEF							# ActDirUndefine
					| K_WARNING   T_STRINGCONSTANT						# ActDirWarning
					| T_ASSIGN    <expression>							# ActDirSet
					|													# ActIgnore
					;


<operand> : T_OPERAND_IX											# ActSetOpSimple
		  | T_OPERAND_IY											# ActSetOpSimple
		  | T_OPERAND_SIMPLE										# ActSetOpSimple
		  | "[" T_OPERAND_IX "+" <expression> "]"					# ActSetOpIndOff
		  | "[" T_OPERAND_IY "+" <expression> "]"					# ActSetOpIndOff
		  | "[" T_OPERAND_IX "]"									# ActSetOpInd
		  | "[" T_OPERAND_IY "]"									# ActSetOpInd
		  | "[" T_OPERAND_SIMPLE "]"								# ActSetOpSimpleW
		  | "[" <expression> "]"									# ActSetOpBracketed
		  | <expression>											# ActSetOpLiteral
		  ;
	
<param_list>	: <param_list> "," T_SYMBOLDEF						# ActParamList
				| T_SYMBOLDEF										# ActCopy1
				;
					
//===========================================================================					
//
// Expression evaluation
//
//===========================================================================					
					
<expression_list>		: <expression_list> "," <expression_any>	# ActIgnore //# ActExprListA8orStr
						| <expression_any>							# ActIgnore
						;

<expression_any>		: <expression>								# ActExprListItem
						;

						

// ---------------------------------------
// Logical and integer 32 bit expressions
// ---------------------------------------
						
<expression>		: <expression> T_LOGICALOR <and_expr>			# ActLogOr
					| <and_expr>									# ActCopy1
					;
               
<and_expr>			: <and_expr> T_LOGICALAND <binor_expr>			# ActLogAnd
					| <binor_expr>									# ActCopy1
					;
             
<binor_expr>		: <binor_expr> T_BINOR <binxor_expr>			# ActExprOr
					| <binxor_expr>									# ActCopy1
					;
               
<binxor_expr>		: <binxor_expr> T_BINXOR <binand_expr>			# ActExprXor
					| <binand_expr>									# ActCopy1
					;
                
<binand_expr>		: <binand_expr> T_BINAND <equate_expr>			# ActExprAnd
					| <equate_expr>									# ActCopy1
					;
                
<equate_expr>		: <equate_expr> T_EQUAL <compare_expr>			# ActCompEQ
					| <equate_expr> T_NOTEQUAL <compare_expr>		# ActCompNE
					| <compare_expr>								# ActCopy1
					;
                
<compare_expr>		: <compare_expr> T_LESSTHAN <shift_expr>		# ActCompLT
					| <compare_expr> T_GREATERTHAN <shift_expr>		# ActCompGT
					| <compare_expr> T_LESSEQUAL <shift_expr>		# ActCompLE
					| <compare_expr> T_GREATEREQUAL <shift_expr>	# ActCompGE
					| <shift_expr>									# ActCopy1
					;
                 
<shift_expr>		: <shift_expr> T_LEFTSHIFT <add_expr>			# ActExprShl
					| <shift_expr> T_RIGHTSHIFT <add_expr>			# ActExprShr
					| <add_expr>									# ActCopy1
					;
                 
<add_expr>			: <add_expr> "+" <mult_expr>					# ActExprAdd
					| <add_expr> "-" <mult_expr>					# ActExprSub
					| <mult_expr>									# ActCopy1
					;
                 
<mult_expr>			: <mult_expr> "*" <unary_expr>					# ActExprMul
					| <mult_expr> "/" <unary_expr>					# ActExprDiv
					| <mult_expr> T_MODULO <unary_expr>				# ActExprMod
					| <unary_expr>									# ActCopy1
					;
                 
<unary_expr>		: "-" <value>									# ActExprUnaryMinus
					| "+" <value>									# ActExprUnaryPlus
					| T_LOGICALNOT <value>							# ActLogNot
					| T_BINNOT <value>								# ActExprNot
					| <value>										# ActCopy1
					;
                 
<value>				: "$" 											# ActValueOrg 
					| F_ORG ")"										# ActValueOrg
					| T_HEXLITERAL									# ActHexLiteral
					| T_DECLITERAL									# ActDecLiteral
					| T_OCTLITERAL									# ActOctLiteral
					| T_BINLITERAL									# ActBinLiteral
					| F_HIGH <expression> ")"						# ActFuncHigh
					| F_IIF <expression> "," <expression> "," <expression> ")" # ActFuncIif
					| F_LOW <expression> ")"						# ActFuncLow
					| T_SYMBOLDEF									# ActValueSymbol
					| T_STRINGCONSTANT								# ActStringConstant
					| "(" <expression> ")"							# ActExprBracket
					;
				
		